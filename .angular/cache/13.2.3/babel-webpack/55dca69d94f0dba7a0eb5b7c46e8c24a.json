{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.doEdgeCollideWithPoint = exports.isPixelColored = void 0;\n/**\n * This helper returns true is the pixel at (x,y) in the given WebGL context is\n * colored, and false else.\n */\n\nfunction isPixelColored(gl, x, y) {\n  var pixels = new Uint8Array(4);\n  gl.readPixels(x, gl.drawingBufferHeight - y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pixels);\n  return pixels[3] > 0;\n}\n\nexports.isPixelColored = isPixelColored;\n/**\n * This helper checks whether or not a point (x, y) collides with an\n * edge, connecting a source (xS, yS) to a target (xT, yT) with a thickness in\n * pixels.\n */\n\nfunction doEdgeCollideWithPoint(x, y, xS, yS, xT, yT, thickness) {\n  // Check first if point is out of the rectangle which opposite corners are the\n  // source and the target, rectangle we expand by `thickness` in every\n  // directions:\n  if (x < xS - thickness && x < xT - thickness) return false;\n  if (y < yS - thickness && y < yT - thickness) return false;\n  if (x > xS + thickness && x > xT + thickness) return false;\n  if (y > yS + thickness && y > yT + thickness) return false; // Check actual collision now: Since we now the point is in this big rectangle\n  // we \"just\" need to check that the distance between the point and the line\n  // connecting the source and the target is less than `thickness`:\n  // https://en.wikipedia.org/wiki/Distance_from_a_point_to_a_line\n\n  var distance = Math.abs((xT - xS) * (yS - y) - (xS - x) * (yT - yS)) / Math.sqrt(Math.pow(xT - xS, 2) + Math.pow(yT - yS, 2));\n  return distance < thickness / 2;\n}\n\nexports.doEdgeCollideWithPoint = doEdgeCollideWithPoint;","map":null,"metadata":{},"sourceType":"script"}