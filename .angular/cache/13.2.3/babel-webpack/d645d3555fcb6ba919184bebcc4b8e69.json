{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../client.service\";\nimport * as i2 from \"@angular/forms\";\nconst _c0 = [\"inputTxt\"];\nconst _c1 = [\"*\"];\nexport let InputComponent = /*#__PURE__*/(() => {\n  class InputComponent {\n    constructor(_clientService, _formBuilder) {\n      this._clientService = _clientService;\n      this._formBuilder = _formBuilder;\n      this.form = this._formBuilder.group({\n        input: ['', [Validators.required, Validators.maxLength(750)]]\n      });\n      this.passedCommandsIndex = 0;\n      this.passedCommands = [];\n    }\n\n    ngOnInit() {\n      document.onkeydown = e => {\n        switch (e.key) {\n          case \"ArrowUp\":\n            this.getPassCommand(true);\n            break;\n\n          case \"ArrowDown\":\n            this.getPassCommand(false);\n            break;\n\n          default:\n            this.passedCommandsIndex = 0;\n        }\n      };\n    }\n\n    getPassCommand(increment) {\n      let value = this.passedCommands.reverse()[this.passedCommandsIndex];\n      this.passedCommands.reverse();\n\n      if (value) {\n        this.form.get('input').setValue('');\n        setTimeout(() => {\n          this.form.get('input').setValue(value);\n        });\n      }\n\n      if (increment) {\n        if (this.passedCommandsIndex > this.passedCommands.length) {\n          this.passedCommandsIndex = this.passedCommands.length;\n        }\n\n        this.passedCommandsIndex += 1;\n      } else {\n        if (this.passedCommandsIndex < 0) {\n          this.passedCommandsIndex = 0;\n        }\n\n        this.passedCommandsIndex -= 1;\n      }\n    }\n\n    OnClickToServer(command) {\n      this._clientService.sendToServer(command);\n    }\n\n    sendToServer() {\n      this.passedCommands.push(this.cleanInput());\n\n      this._clientService.sendToServer(this.cleanInput());\n    }\n    /*\r\n        Removes html tags\r\n        Trims white space\r\n        Makes lowercase\r\n    */\n\n\n    cleanInput() {\n      return this.form.get('input').value.replace(/<[^>]*>/g, '').trim();\n    }\n\n  }\n\n  InputComponent.ɵfac = function InputComponent_Factory(t) {\n    return new (t || InputComponent)(i0.ɵɵdirectiveInject(i1.ClientService), i0.ɵɵdirectiveInject(i2.FormBuilder));\n  };\n\n  InputComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: InputComponent,\n    selectors: [[\"app-input\"]],\n    viewQuery: function InputComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.inputTxt = _t.first);\n      }\n    },\n    ngContentSelectors: _c1,\n    decls: 10,\n    vars: 2,\n    consts: [[3, \"formGroup\"], [1, \"bottom-bar\"], [1, \"input\"], [\"type\", \"text\", \"placeholder\", \"Enter commands here, /? for help.\", \"formControlName\", \"input\", \"maxlength\", \"751\"], [\"inputTxt\", \"\"], [\"type\", \"submit\", 3, \"disabled\", \"click\"], [\"btn\", \"\"], [1, \"extra-content\"]],\n    template: function InputComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r2 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵprojectionDef();\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"div\", 2);\n        i0.ɵɵelement(3, \"input\", 3, 4);\n        i0.ɵɵelementStart(5, \"button\", 5, 6);\n        i0.ɵɵlistener(\"click\", function InputComponent_Template_button_click_5_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          const _r0 = i0.ɵɵreference(4);\n\n          ctx.sendToServer();\n          return _r0.select();\n        });\n        i0.ɵɵtext(7, \"Send\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 7);\n        i0.ɵɵprojection(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"disabled\", ctx.form.invalid);\n      }\n    },\n    directives: [i2.ɵNgNoValidate, i2.NgControlStatusGroup, i2.FormGroupDirective, i2.DefaultValueAccessor, i2.NgControlStatus, i2.FormControlName, i2.MaxLengthValidator],\n    styles: [\"input[type=text][_ngcontent-%COMP%]{font-size:14px;background-color:#111;border-top:1px solid #656565;color:#fff;padding:15px;width:100%;box-sizing:border-box;border:0 none}form[_ngcontent-%COMP%]{position:relative}form[_ngcontent-%COMP%]   button[_ngcontent-%COMP%]{position:absolute;top:10px;right:15px;width:65px;height:30px}  .mat-autocomplete-panel{width:150px!important}  .mat-option.mat-active{background-color:#f6d437!important;color:#111}  .ta-results{bottom:44px;left:0}  .ta-results .ta-item{background-color:#222;border:1px solid #444;color:#f6d437;min-width:100px;font-size:16px}  .ta-results .ta-item:focus{background-color:#f6d437;color:#111}.bottom-bar[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr auto}.bottom-bar[_ngcontent-%COMP%]   .input[_ngcontent-%COMP%]{position:relative}.bottom-bar[_ngcontent-%COMP%]   .extra-content[_ngcontent-%COMP%]{margin:0 20px;vertical-align:middle;display:flex;align-items:center}\"]\n  });\n  return InputComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}