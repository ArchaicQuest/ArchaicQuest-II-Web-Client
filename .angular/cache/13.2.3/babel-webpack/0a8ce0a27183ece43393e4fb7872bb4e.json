{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AbstractProgram = void 0;\n/**\n * Sigma.js WebGL Renderer Program\n * ================================\n *\n * Class representing a single WebGL program used by sigma's WebGL renderer.\n * @module\n */\n\nvar utils_1 = require(\"../../shaders/utils\");\n/**\n * Abstract Program class.\n *\n * @constructor\n */\n\n\nvar AbstractProgram =\n/** @class */\nfunction () {\n  function AbstractProgram(gl, vertexShaderSource, fragmentShaderSource, points, attributes) {\n    this.array = new Float32Array();\n    this.points = points;\n    this.attributes = attributes;\n    this.gl = gl;\n    this.vertexShaderSource = vertexShaderSource;\n    this.fragmentShaderSource = fragmentShaderSource;\n    var buffer = gl.createBuffer();\n    if (buffer === null) throw new Error(\"AbstractProgram: error while creating the buffer\");\n    this.buffer = buffer;\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.buffer);\n    this.vertexShader = (0, utils_1.loadVertexShader)(gl, this.vertexShaderSource);\n    this.fragmentShader = (0, utils_1.loadFragmentShader)(gl, this.fragmentShaderSource);\n    this.program = (0, utils_1.loadProgram)(gl, [this.vertexShader, this.fragmentShader]);\n  }\n\n  AbstractProgram.prototype.bufferData = function () {\n    var gl = this.gl;\n    gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW);\n  };\n\n  AbstractProgram.prototype.allocate = function (capacity) {\n    this.array = new Float32Array(this.points * this.attributes * capacity);\n  };\n\n  AbstractProgram.prototype.hasNothingToRender = function () {\n    return this.array.length === 0;\n  };\n\n  return AbstractProgram;\n}();\n\nexports.AbstractProgram = AbstractProgram;","map":null,"metadata":{},"sourceType":"script"}