{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createNodeCompoundProgram = exports.AbstractNodeProgram = void 0;\n/**\n * Sigma.js WebGL Abstract Node Program\n * =====================================\n *\n * @module\n */\n\nvar program_1 = require(\"./program\");\n/**\n * Node Program class.\n *\n * @constructor\n */\n\n\nvar AbstractNodeProgram =\n/** @class */\nfunction (_super) {\n  __extends(AbstractNodeProgram, _super);\n\n  function AbstractNodeProgram(gl, vertexShaderSource, fragmentShaderSource, points, attributes) {\n    var _this = _super.call(this, gl, vertexShaderSource, fragmentShaderSource, points, attributes) || this; // Locations\n\n\n    _this.positionLocation = gl.getAttribLocation(_this.program, \"a_position\");\n    _this.sizeLocation = gl.getAttribLocation(_this.program, \"a_size\");\n    _this.colorLocation = gl.getAttribLocation(_this.program, \"a_color\"); // Uniform Location\n\n    var matrixLocation = gl.getUniformLocation(_this.program, \"u_matrix\");\n    if (matrixLocation === null) throw new Error(\"AbstractNodeProgram: error while getting matrixLocation\");\n    _this.matrixLocation = matrixLocation;\n    var ratioLocation = gl.getUniformLocation(_this.program, \"u_ratio\");\n    if (ratioLocation === null) throw new Error(\"AbstractNodeProgram: error while getting ratioLocation\");\n    _this.ratioLocation = ratioLocation;\n    var scaleLocation = gl.getUniformLocation(_this.program, \"u_scale\");\n    if (scaleLocation === null) throw new Error(\"AbstractNodeProgram: error while getting scaleLocation\");\n    _this.scaleLocation = scaleLocation;\n    return _this;\n  }\n\n  AbstractNodeProgram.prototype.bind = function () {\n    var gl = this.gl;\n    gl.enableVertexAttribArray(this.positionLocation);\n    gl.enableVertexAttribArray(this.sizeLocation);\n    gl.enableVertexAttribArray(this.colorLocation);\n    gl.vertexAttribPointer(this.positionLocation, 2, gl.FLOAT, false, this.attributes * Float32Array.BYTES_PER_ELEMENT, 0);\n    gl.vertexAttribPointer(this.sizeLocation, 1, gl.FLOAT, false, this.attributes * Float32Array.BYTES_PER_ELEMENT, 8);\n    gl.vertexAttribPointer(this.colorLocation, 4, gl.UNSIGNED_BYTE, true, this.attributes * Float32Array.BYTES_PER_ELEMENT, 12);\n  };\n\n  return AbstractNodeProgram;\n}(program_1.AbstractProgram);\n\nexports.AbstractNodeProgram = AbstractNodeProgram;\n/**\n * Helper function combining two or more programs into a single compound one.\n * Note that this is more a quick & easy way to combine program than a really\n * performant option. More performant programs can be written entirely.\n *\n * @param  {array}    programClasses - Program classes to combine.\n * @return {function}\n */\n\nfunction createNodeCompoundProgram(programClasses) {\n  return (\n    /** @class */\n    function () {\n      function NodeCompoundProgram(gl, renderer) {\n        this.programs = programClasses.map(function (ProgramClass) {\n          return new ProgramClass(gl, renderer);\n        });\n      }\n\n      NodeCompoundProgram.prototype.bufferData = function () {\n        this.programs.forEach(function (program) {\n          return program.bufferData();\n        });\n      };\n\n      NodeCompoundProgram.prototype.allocate = function (capacity) {\n        this.programs.forEach(function (program) {\n          return program.allocate(capacity);\n        });\n      };\n\n      NodeCompoundProgram.prototype.bind = function () {// nothing todo, it's already done in each program constructor\n      };\n\n      NodeCompoundProgram.prototype.render = function (params) {\n        this.programs.forEach(function (program) {\n          return program.render(params);\n        });\n      };\n\n      NodeCompoundProgram.prototype.process = function (data, hidden, offset) {\n        this.programs.forEach(function (program) {\n          return program.process(data, hidden, offset);\n        });\n      };\n\n      return NodeCompoundProgram;\n    }()\n  );\n}\n\nexports.createNodeCompoundProgram = createNodeCompoundProgram;","map":null,"metadata":{},"sourceType":"script"}