{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { DefaultReconnectPolicy } from \"./DefaultReconnectPolicy\";\nimport { HttpConnection } from \"./HttpConnection\";\nimport { HubConnection } from \"./HubConnection\";\nimport { LogLevel } from \"./ILogger\";\nimport { JsonHubProtocol } from \"./JsonHubProtocol\";\nimport { NullLogger } from \"./Loggers\";\nimport { Arg, ConsoleLogger } from \"./Utils\";\nconst LogLevelNameMapping = {\n  trace: LogLevel.Trace,\n  debug: LogLevel.Debug,\n  info: LogLevel.Information,\n  information: LogLevel.Information,\n  warn: LogLevel.Warning,\n  warning: LogLevel.Warning,\n  error: LogLevel.Error,\n  critical: LogLevel.Critical,\n  none: LogLevel.None\n};\n\nfunction parseLogLevel(name) {\n  // Case-insensitive matching via lower-casing\n  // Yes, I know case-folding is a complicated problem in Unicode, but we only support\n  // the ASCII strings defined in LogLevelNameMapping anyway, so it's fine -anurse.\n  const mapping = LogLevelNameMapping[name.toLowerCase()];\n\n  if (typeof mapping !== \"undefined\") {\n    return mapping;\n  } else {\n    throw new Error(`Unknown log level: ${name}`);\n  }\n}\n/** A builder for configuring {@link @microsoft/signalr.HubConnection} instances. */\n\n\nexport class HubConnectionBuilder {\n  configureLogging(logging) {\n    Arg.isRequired(logging, \"logging\");\n\n    if (isLogger(logging)) {\n      this.logger = logging;\n    } else if (typeof logging === \"string\") {\n      const logLevel = parseLogLevel(logging);\n      this.logger = new ConsoleLogger(logLevel);\n    } else {\n      this.logger = new ConsoleLogger(logging);\n    }\n\n    return this;\n  }\n\n  withUrl(url, transportTypeOrOptions) {\n    Arg.isRequired(url, \"url\");\n    Arg.isNotEmpty(url, \"url\");\n    this.url = url; // Flow-typing knows where it's at. Since HttpTransportType is a number and IHttpConnectionOptions is guaranteed\n    // to be an object, we know (as does TypeScript) this comparison is all we need to figure out which overload was called.\n\n    if (typeof transportTypeOrOptions === \"object\") {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        ...transportTypeOrOptions\n      };\n    } else {\n      this.httpConnectionOptions = { ...this.httpConnectionOptions,\n        transport: transportTypeOrOptions\n      };\n    }\n\n    return this;\n  }\n  /** Configures the {@link @microsoft/signalr.HubConnection} to use the specified Hub Protocol.\r\n   *\r\n   * @param {IHubProtocol} protocol The {@link @microsoft/signalr.IHubProtocol} implementation to use.\r\n   */\n\n\n  withHubProtocol(protocol) {\n    Arg.isRequired(protocol, \"protocol\");\n    this.protocol = protocol;\n    return this;\n  }\n\n  withAutomaticReconnect(retryDelaysOrReconnectPolicy) {\n    if (this.reconnectPolicy) {\n      throw new Error(\"A reconnectPolicy has already been set.\");\n    }\n\n    if (!retryDelaysOrReconnectPolicy) {\n      this.reconnectPolicy = new DefaultReconnectPolicy();\n    } else if (Array.isArray(retryDelaysOrReconnectPolicy)) {\n      this.reconnectPolicy = new DefaultReconnectPolicy(retryDelaysOrReconnectPolicy);\n    } else {\n      this.reconnectPolicy = retryDelaysOrReconnectPolicy;\n    }\n\n    return this;\n  }\n  /** Creates a {@link @microsoft/signalr.HubConnection} from the configuration options specified in this builder.\r\n   *\r\n   * @returns {HubConnection} The configured {@link @microsoft/signalr.HubConnection}.\r\n   */\n\n\n  build() {\n    // If httpConnectionOptions has a logger, use it. Otherwise, override it with the one\n    // provided to configureLogger\n    const httpConnectionOptions = this.httpConnectionOptions || {}; // If it's 'null', the user **explicitly** asked for null, don't mess with it.\n\n    if (httpConnectionOptions.logger === undefined) {\n      // If our logger is undefined or null, that's OK, the HttpConnection constructor will handle it.\n      httpConnectionOptions.logger = this.logger;\n    } // Now create the connection\n\n\n    if (!this.url) {\n      throw new Error(\"The 'HubConnectionBuilder.withUrl' method must be called before building the connection.\");\n    }\n\n    const connection = new HttpConnection(this.url, httpConnectionOptions);\n    return HubConnection.create(connection, this.logger || NullLogger.instance, this.protocol || new JsonHubProtocol(), this.reconnectPolicy);\n  }\n\n}\n\nfunction isLogger(logger) {\n  return logger.log !== undefined;\n} //# sourceMappingURL=HubConnectionBuilder.js.map","map":null,"metadata":{},"sourceType":"module"}