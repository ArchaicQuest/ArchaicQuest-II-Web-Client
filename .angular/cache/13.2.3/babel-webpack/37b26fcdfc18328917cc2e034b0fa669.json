{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar captor_1 = __importStar(require(\"./captor\"));\n\nvar DRAG_TIMEOUT = 200;\nvar TOUCH_INERTIA_RATIO = 3;\nvar TOUCH_INERTIA_DURATION = 200;\n/**\n * Touch captor class.\n *\n * @constructor\n */\n\nvar TouchCaptor =\n/** @class */\nfunction (_super) {\n  __extends(TouchCaptor, _super);\n\n  function TouchCaptor(container, renderer) {\n    var _this = _super.call(this, container, renderer) || this;\n\n    _this.enabled = true;\n    _this.isMoving = false;\n    _this.touchMode = 0; // number of touches down\n    // Binding methods:\n\n    _this.handleStart = _this.handleStart.bind(_this);\n    _this.handleLeave = _this.handleLeave.bind(_this);\n    _this.handleMove = _this.handleMove.bind(_this); // Binding events\n\n    container.addEventListener(\"touchstart\", _this.handleStart, false);\n    container.addEventListener(\"touchend\", _this.handleLeave, false);\n    container.addEventListener(\"touchcancel\", _this.handleLeave, false);\n    container.addEventListener(\"touchmove\", _this.handleMove, false);\n    return _this;\n  }\n\n  TouchCaptor.prototype.kill = function () {\n    var container = this.container;\n    container.removeEventListener(\"touchstart\", this.handleStart);\n    container.removeEventListener(\"touchend\", this.handleLeave);\n    container.removeEventListener(\"touchcancel\", this.handleLeave);\n    container.removeEventListener(\"touchmove\", this.handleMove);\n  };\n\n  TouchCaptor.prototype.getDimensions = function () {\n    return {\n      width: this.container.offsetWidth,\n      height: this.container.offsetHeight\n    };\n  };\n\n  TouchCaptor.prototype.dispatchRelatedMouseEvent = function (type, e, position, emitter) {\n    var mousePosition = position || (0, captor_1.getPosition)(e.touches[0], this.container);\n    var mouseEvent = new MouseEvent(type, {\n      clientX: mousePosition.x,\n      clientY: mousePosition.y,\n      altKey: e.altKey,\n      ctrlKey: e.ctrlKey\n    });\n    (emitter || this.container).dispatchEvent(mouseEvent);\n  };\n\n  TouchCaptor.prototype.handleStart = function (e) {\n    var _this = this;\n\n    if (!this.enabled) return; // Prevent default to avoid default browser behaviors...\n\n    e.preventDefault(); // ...but simulate mouse behavior anyway, to get the MouseCaptor working as well:\n\n    if (e.touches.length === 1) this.dispatchRelatedMouseEvent(\"mousedown\", e);\n    var touches = (0, captor_1.getTouchesArray)(e.touches);\n    this.isMoving = true;\n    this.touchMode = touches.length;\n    this.startCameraState = this.renderer.getCamera().getState();\n    this.startTouchesPositions = touches.map(function (touch) {\n      return (0, captor_1.getPosition)(touch, _this.container);\n    });\n    this.lastTouchesPositions = this.startTouchesPositions; // When there are two touches down, let's record distance and angle as well:\n\n    if (this.touchMode === 2) {\n      var _a = __read(this.startTouchesPositions, 2),\n          _b = _a[0],\n          x0 = _b.x,\n          y0 = _b.y,\n          _c = _a[1],\n          x1 = _c.x,\n          y1 = _c.y;\n\n      this.startTouchesAngle = Math.atan2(y1 - y0, x1 - x0);\n      this.startTouchesDistance = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2));\n    }\n\n    this.emit(\"touchdown\", (0, captor_1.getTouchCoords)(e, this.container));\n  };\n\n  TouchCaptor.prototype.handleLeave = function (e) {\n    if (!this.enabled) return; // Prevent default to avoid default browser behaviors...\n\n    e.preventDefault(); // ...but simulate mouse behavior anyway, to get the MouseCaptor working as well:\n\n    if (e.touches.length === 0 && this.lastTouchesPositions && this.lastTouchesPositions.length) {\n      this.dispatchRelatedMouseEvent(\"mouseup\", e, this.lastTouchesPositions[0], document);\n      this.dispatchRelatedMouseEvent(\"click\", e, this.lastTouchesPositions[0]);\n    }\n\n    if (this.movingTimeout) {\n      this.isMoving = false;\n      clearTimeout(this.movingTimeout);\n    }\n\n    switch (this.touchMode) {\n      case 2:\n        if (e.touches.length === 1) {\n          this.handleStart(e);\n          e.preventDefault();\n          break;\n        }\n\n      /* falls through */\n\n      case 1:\n        // TODO\n        // Dispatch event\n        if (this.isMoving) {\n          var camera = this.renderer.getCamera();\n          var cameraState = camera.getState(),\n              previousCameraState = camera.getPreviousState() || {\n            x: 0,\n            y: 0\n          };\n          camera.animate({\n            x: cameraState.x + TOUCH_INERTIA_RATIO * (cameraState.x - previousCameraState.x),\n            y: cameraState.y + TOUCH_INERTIA_RATIO * (cameraState.y - previousCameraState.y)\n          }, {\n            duration: TOUCH_INERTIA_DURATION,\n            easing: \"quadraticOut\"\n          });\n        }\n\n        this.isMoving = false;\n        this.touchMode = 0;\n        break;\n    }\n\n    this.emit(\"touchup\", (0, captor_1.getTouchCoords)(e, this.container));\n  };\n\n  TouchCaptor.prototype.handleMove = function (e) {\n    var _a;\n\n    var _this = this;\n\n    if (!this.enabled) return; // Prevent default to avoid default browser behaviors...\n\n    e.preventDefault(); // ...but simulate mouse behavior anyway, to get the MouseCaptor working as well:\n\n    if (e.touches.length === 1) this.dispatchRelatedMouseEvent(\"mousemove\", e);\n    var camera = this.renderer.getCamera();\n    var startCameraState = this.startCameraState;\n    var touches = (0, captor_1.getTouchesArray)(e.touches);\n    var touchesPositions = touches.map(function (touch) {\n      return (0, captor_1.getPosition)(touch, _this.container);\n    });\n    this.lastTouchesPositions = touchesPositions;\n    this.isMoving = true;\n    if (this.movingTimeout) clearTimeout(this.movingTimeout);\n    this.movingTimeout = window.setTimeout(function () {\n      _this.isMoving = false;\n    }, DRAG_TIMEOUT);\n\n    switch (this.touchMode) {\n      case 1:\n        {\n          var _b = this.renderer.viewportToFramedGraph((this.startTouchesPositions || [])[0]),\n              xStart = _b.x,\n              yStart = _b.y;\n\n          var _c = this.renderer.viewportToFramedGraph(touchesPositions[0]),\n              x = _c.x,\n              y = _c.y;\n\n          camera.setState({\n            x: startCameraState.x + xStart - x,\n            y: startCameraState.y + yStart - y\n          });\n          break;\n        }\n\n      case 2:\n        {\n          /**\n           * Here is the thinking here:\n           *\n           * 1. We can find the new angle and ratio, by comparing the vector from \"touch one\" to \"touch two\" at the start\n           *    of the d'n'd and now\n           *\n           * 2. We can use `Camera#viewportToGraph` inside formula to retrieve the new camera position, using the graph\n           *    position of a touch at the beginning of the d'n'd (using `startCamera.viewportToGraph`) and the viewport\n           *    position of this same touch now\n           */\n          var newCameraState = {};\n          var _d = touchesPositions[0],\n              x0 = _d.x,\n              y0 = _d.y;\n          var _e = touchesPositions[1],\n              x1 = _e.x,\n              y1 = _e.y;\n          var angleDiff = Math.atan2(y1 - y0, x1 - x0) - this.startTouchesAngle;\n          var ratioDiff = Math.hypot(y1 - y0, x1 - x0) / this.startTouchesDistance; // 1.\n\n          var newRatio = camera.getBoundedRatio(startCameraState.ratio / ratioDiff);\n          newCameraState.ratio = newRatio;\n          newCameraState.angle = startCameraState.angle + angleDiff; // 2.\n\n          var dimensions = this.getDimensions();\n          var touchGraphPosition = this.renderer.viewportToFramedGraph((this.startTouchesPositions || [])[0], {\n            cameraState: startCameraState\n          });\n          var smallestDimension = Math.min(dimensions.width, dimensions.height);\n          var dx = smallestDimension / dimensions.width;\n          var dy = smallestDimension / dimensions.height;\n          var ratio = newRatio / smallestDimension; // Align with center of the graph:\n\n          var x = x0 - smallestDimension / 2 / dx;\n          var y = y0 - smallestDimension / 2 / dy; // Rotate:\n\n          _a = __read([x * Math.cos(-newCameraState.angle) - y * Math.sin(-newCameraState.angle), y * Math.cos(-newCameraState.angle) + x * Math.sin(-newCameraState.angle)], 2), x = _a[0], y = _a[1];\n          newCameraState.x = touchGraphPosition.x - x * ratio;\n          newCameraState.y = touchGraphPosition.y + y * ratio;\n          camera.setState(newCameraState);\n          break;\n        }\n    }\n\n    this.emit(\"touchmove\", (0, captor_1.getTouchCoords)(e, this.container));\n  };\n\n  return TouchCaptor;\n}(captor_1.default);\n\nexports.default = TouchCaptor;","map":null,"metadata":{},"sourceType":"script"}