{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { environment } from 'src/environments/environment';\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nexport let ClientService = /*#__PURE__*/(() => {\n  class ClientService {\n    constructor(dialog) {\n      this.dialog = dialog;\n      this.connected = false;\n      /*\r\n          Data\r\n          The data sent from the server to the client, such as room descriptions, command output, etc\r\n      */\n\n      this.data = [];\n      this.$data = new BehaviorSubject(this.data);\n      this.eq = \"\";\n      this.$eq = new BehaviorSubject(this.eq);\n      this.time = \"\";\n      this.$time = new BehaviorSubject(this.time);\n      this.contentPopup = \"\";\n      this.$contentPopup = new BehaviorSubject(this.contentPopup);\n      this.quest = \"\";\n      this.$quest = new BehaviorSubject(this.quest);\n      this.inv = \"\";\n      this.$inv = new BehaviorSubject(this.inv);\n      this.affects = \"\";\n      this.$affects = new BehaviorSubject(this.affects);\n      this.comms = {\n        text: '',\n        type: ''\n      };\n      this.$comms = new BehaviorSubject(this.comms);\n      this.map = {\n        map: \"\",\n        roomId: 0\n      };\n      this.$map = new BehaviorSubject(this.map);\n      this.playerScore = null;\n      this.$playerScore = new BehaviorSubject(this.playerScore);\n      /*\r\n          Player stats\r\n          The HP, Mana, Moves, and Exp sent from the server to the player\r\n      */\n\n      this.stats = {\n        hp: {\n          current: 0,\n          max: 0\n        },\n        mana: {\n          current: 0,\n          max: 0\n        },\n        moves: {\n          current: 0,\n          max: 0\n        },\n        exp: {\n          current: 0,\n          max: 0\n        }\n      };\n      this.$stats = new BehaviorSubject(this.stats);\n    }\n\n    initHub() {\n      this.connection = new HubConnectionBuilder().withUrl(`${environment.hostAPI}/Hubs/game`).withAutomaticReconnect().build();\n      this.updateWindow('', '<div>Connecting to ArchaicQuest, please wait.</div>');\n      this.characterId = sessionStorage.getItem('characterId');\n      this.connectToHub();\n    }\n\n    connectToHub() {\n      return __awaiter(this, void 0, void 0, function* () {\n        yield this.connection.start().then(x => {\n          this.connected = true;\n          this.createEvents();\n          this.connectionId = this.connection['connection'].connectionId;\n          this.connection.invoke('getConnectionId').then(connectionId => {\n            this.connectionId = connectionId;\n            this.connection.send('welcome', this.connectionId);\n            this.connection.send('AddCharacter', this.connectionId, this.characterId);\n          });\n        }).catch(err => console.error(err.toString()));\n      });\n    } // openDialog(data: { name: string, desc: string, type: string }) {\n    //     this.dialog.open(ContextModalComponent, {\n    //         data: {\n    //             name: data.name,\n    //             desc: data.desc,\n    //             type: data.type\n    //         }\n    //     });\n    // }\n\n\n    createEvents() {\n      this.connection.on('SendMessage', (sender, message) => {\n        this.updateWindow(sender, message);\n      });\n      this.connection.on('UpdatePlayerHP', (currentHp, maxHP) => {\n        this.updateStats(currentHp, maxHP, 'hp');\n      });\n      this.connection.on('UpdatePlayerMana', (currentMana, maxMana) => {\n        this.updateStats(currentMana, maxMana, 'mana');\n      });\n      this.connection.on('UpdatePlayerMoves', (currentMoves, maxMoves) => {\n        this.updateStats(currentMoves, maxMoves, 'moves');\n      });\n      this.connection.on('UpdatePlayerExp', (currentExp, maxExp) => {\n        this.updateStats(currentExp, maxExp, 'exp');\n      });\n      this.connection.on('QuestUpdate', quest => {\n        this.quest = quest;\n        this.questChange();\n      });\n      this.connection.on('EquipmentUpdate', eq => {\n        this.eq = eq;\n        this.EquipmentChange();\n      });\n      this.connection.on('InventoryUpdate', inv => {\n        console.log('InventoryUpdate', inv);\n        this.inv = inv;\n        this.$inv.next(this.inv);\n      });\n      this.connection.on('UpdatePlayerAffects', x => {\n        console.log('UpdatePlayerAffects', x);\n        this.affects = x;\n        this.$affects.next(this.affects);\n      });\n      this.connection.on('ScoreUpdate', player => {\n        this.playerScore = player;\n        this.$playerScore.next(this.playerScore);\n      });\n      this.connection.on('CommUpdate', (txt, type) => {\n        this.comms = {\n          text: txt,\n          type: type\n        };\n        this.$comms.next(this.comms);\n      });\n      this.connection.on('MapUpdate', (map, roomId) => {\n        this.map.map = JSON.parse(map);\n        this.map.roomId = roomId;\n        this.$map.next(this.map);\n      });\n      this.connection.on('SendAction', (sender, message) => {\n        this.updateWindow(sender, message);\n      });\n      this.connection.on('Close', (sender, message) => {\n        this.closeConnection();\n      });\n      this.connection.on('UpdateTime', time => {\n        this.time = time;\n        this.$time.next(this.time);\n        console.log(\"time t \" + time);\n      });\n      this.connection.on('UpdateContentPopUp', content => {\n        this.contentPopup = content;\n        this.$contentPopup.next(this.contentPopup);\n        console.log(content);\n      });\n    }\n\n    returnContentPopUp() {\n      return this.contentPopup;\n    }\n\n    returnConnection() {\n      return this.connection;\n    }\n\n    questChange() {\n      this.$quest.next(this.quest);\n    }\n\n    EquipmentChange() {\n      this.$eq.next(this.eq);\n    }\n\n    updateStats(current, max = 0, type) {\n      this.stats[type].max = max;\n      this.stats[type].current = current;\n      this.statsChange();\n    }\n\n    statsChange() {\n      this.$stats.next(this.stats);\n    } // Handles updating data in the client window\n\n\n    eventChange() {\n      this.$data.next(this.data);\n    }\n\n    updateWindow(sender = '', message = '') {\n      this.data.push(this.ParseHtmlColorCodes(sender + ' ' + message));\n      this.eventChange();\n    }\n\n    sendToServer(message) {\n      this.updateWindow('', `<p class=\"echo\">${message}</p>`); // if (this.showContentModal(message)) {\n      //     return;\n      // }\n\n      this.connection.send('SendToServer', message, this.connectionId).catch(err => {});\n    } // content modal content\n    // book pages, char desc etc\n\n\n    saveContent(message) {\n      this.connection.send('CharContent', message, this.connectionId).catch(err => {});\n    } // openContentDialog(title: string, desc: string) {\n    //     this.dialog.open(ContentModalComponent, {\n    //         data: {\n    //             name: title,\n    //             desc: desc,\n    //         },\n    //         width: '750px'\n    //     });\n    // }\n    // private showContentModal(message: string) {\n    //     if (message.toLowerCase().startsWith(\"write\")) {\n    //         this.openContentDialog(\"Write Book\", \"Page\");\n    //         return true\n    //     }\n    //     return false;\n    // }\n\n    /**\r\n    * Convert color tags into HTML tags.\r\n    * @param {string} text\r\n    * @param {boolean} escape - when `false`, will not escape HTML before parsing. Defaults to `true`.\r\n    * @return {string}\r\n    */\n\n\n    ParseHtmlColorCodes(text, escape = true) {\n      /**\r\n      * The full list of colors.\r\n      */\n      const COLORS = 'white|silver|gray|red|maroon|yellow|olive|lime|green|blue|navy|cyan|teal|purple|magenta|gold|orange|darkorange|orangered|brown|dimgray|hint|1|2|3|4|5|6|7|8|9|10|11|12|13|14|15';\n      /**\r\n       * The template for the resulting replacement.\r\n       * All class names in outputted HTML will be prefixed.\r\n       * You can change the prefix here. If you do, remember to\r\n       * also adjust the CSS file as well.\r\n       */\n\n      const HTML_REPLACEMENT_TEMPLATE = '<span class=\"wm$2\">$3</span>';\n      /**\r\n        * The main Regular Expression for performing replacements.\r\n        */\n\n      const COLOR_RX = new RegExp('({((?:' + COLORS + '))}((?:(?!{(' + COLORS + '|\\/)}).)*)({\\/})*)', 'gims');\n      let escapedText = text;\n      return escapedText.replace(COLOR_RX, HTML_REPLACEMENT_TEMPLATE);\n    }\n\n    closeConnection() {\n      this.connection.off('SendMessage');\n      this.connection.off('SendAction');\n      this.connection.stop().then(() => {\n        console.log(\"connection closed\");\n      }).catch(err => console.log(err));\n    }\n\n    ngOnDestroy() {\n      this.connection = null;\n    }\n\n  }\n\n  ClientService.ɵfac = function ClientService_Factory(t) {\n    return new (t || ClientService)(i0.ɵɵinject(i1.MatDialog));\n  };\n\n  ClientService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientService,\n    factory: ClientService.ɵfac,\n    providedIn: 'root'\n  });\n  return ClientService;\n})();","map":null,"metadata":{},"sourceType":"module"}