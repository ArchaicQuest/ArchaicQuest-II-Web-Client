{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"../client.service\";\nimport * as i3 from \"@angular/platform-browser\";\nimport * as i4 from \"@angular/material/form-field\";\nimport * as i5 from \"@angular/material/input\";\nimport * as i6 from \"@angular/cdk/text-field\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@angular/material/button\";\nconst _c0 = [\"autosize\"];\nexport let ContentModalComponent = /*#__PURE__*/(() => {\n  class ContentModalComponent {\n    constructor(dialogRef, data, ngZone, service, sanitizer) {\n      this.dialogRef = dialogRef;\n      this.data = data;\n      this.ngZone = ngZone;\n      this.service = service;\n      this.sanitizer = sanitizer;\n      this.charCount = 0;\n      this.dataText = \"\";\n    }\n\n    ngOnInit() {\n      this.title = this.sanitizer.bypassSecurityTrustHtml(this.service.ParseHtmlColorCodes(this.data.name));\n      this.dataText = this.data.desc;\n    }\n\n    triggerDescriptionResize() {\n      // Wait for changes to be applied, then trigger textarea resize.\n      this.ngZone.onStable.pipe(take(1)).subscribe(() => this.autosize.resizeToFitContent(true));\n    }\n\n    sendToServer(command) {\n      this.data.desc = this.dataText;\n\n      if (this.data.type == \"description\") {\n        this.data['type'] = \"description\";\n      } else {\n        this.data['type'] = \"book\";\n      }\n\n      this.service.saveContent(JSON.stringify(this.data));\n      this.dialogRef.close();\n    }\n\n    isContainer(type) {\n      return type === 'Container';\n    }\n\n    canOpen(canOpen) {\n      console.log(\"can open \", canOpen);\n      return canOpen === 'True';\n    }\n\n    isOpen(isOpen) {\n      return isOpen;\n    }\n\n  }\n\n  ContentModalComponent.ɵfac = function ContentModalComponent_Factory(t) {\n    return new (t || ContentModalComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(i2.ClientService), i0.ɵɵdirectiveInject(i3.DomSanitizer));\n  };\n\n  ContentModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ContentModalComponent,\n    selectors: [[\"app-context-modal\"]],\n    viewQuery: function ContentModalComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.autosize = _t.first);\n      }\n    },\n    decls: 11,\n    vars: 4,\n    consts: [[3, \"innerHTML\"], [\"appearance\", \"outline\", 1, \"form-control\"], [\"matInput\", \"\", \"placeholder\", \"Description\", \"cdkTextareaAutosize\", \"\", \"cdkAutosizeMinRows\", \"10\", \"cdkAutosizeMaxRows\", \"10\", \"maxlength\", \"500\", 3, \"ngModel\", \"ngModelChange\", \"selectionChange\"], [\"autosize\", \"cdkTextareaAutosize\"], [\"align\", \"end\"], [1, \"button-row\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", 3, \"click\"]],\n    template: function ContentModalComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"h3\", 0);\n        i0.ɵɵelementStart(1, \"mat-form-field\", 1);\n        i0.ɵɵelementStart(2, \"mat-label\");\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"textarea\", 2, 3);\n        i0.ɵɵlistener(\"ngModelChange\", function ContentModalComponent_Template_textarea_ngModelChange_4_listener($event) {\n          return ctx.dataText = $event;\n        })(\"selectionChange\", function ContentModalComponent_Template_textarea_selectionChange_4_listener() {\n          return ctx.triggerDescriptionResize();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"mat-hint\", 4);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"div\", 5);\n        i0.ɵɵelementStart(9, \"button\", 6);\n        i0.ɵɵlistener(\"click\", function ContentModalComponent_Template_button_click_9_listener() {\n          return ctx.sendToServer();\n        });\n        i0.ɵɵtext(10, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"innerHTML\", ctx.title, i0.ɵɵsanitizeHtml);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Page \", ctx.data.pageNumber + 1, \"\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.dataText);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", (ctx.dataText == null ? null : ctx.dataText.length) || 0, \" / 500\");\n      }\n    },\n    directives: [i4.MatFormField, i4.MatLabel, i5.MatInput, i6.CdkTextareaAutosize, i7.DefaultValueAccessor, i7.MaxLengthValidator, i7.NgControlStatus, i7.NgModel, i4.MatHint, i8.MatButton],\n    styles: [\".button-row[_ngcontent-%COMP%]{display:grid;grid-template-columns:1fr 1fr 1fr;grid-gap:15px}h3[_ngcontent-%COMP%]{margin-top:0}p[_ngcontent-%COMP%]{padding-bottom:10px}\"],\n    changeDetection: 0\n  });\n  return ContentModalComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}