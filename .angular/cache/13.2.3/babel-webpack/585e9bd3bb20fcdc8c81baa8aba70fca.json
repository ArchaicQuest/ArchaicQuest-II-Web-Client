{"ast":null,"code":"// Licensed to the .NET Foundation under one or more agreements.\n// The .NET Foundation licenses this file to you under the MIT license.\nimport { MessageType } from \"./IHubProtocol\";\nimport { LogLevel } from \"./ILogger\";\nimport { TransferFormat } from \"./ITransport\";\nimport { NullLogger } from \"./Loggers\";\nimport { TextMessageFormat } from \"./TextMessageFormat\";\nconst JSON_HUB_PROTOCOL_NAME = \"json\";\n/** Implements the JSON Hub Protocol. */\n\nexport class JsonHubProtocol {\n  constructor() {\n    /** @inheritDoc */\n    this.name = JSON_HUB_PROTOCOL_NAME;\n    /** @inheritDoc */\n\n    this.version = 1;\n    /** @inheritDoc */\n\n    this.transferFormat = TransferFormat.Text;\n  }\n  /** Creates an array of {@link @microsoft/signalr.HubMessage} objects from the specified serialized representation.\r\n   *\r\n   * @param {string} input A string containing the serialized representation.\r\n   * @param {ILogger} logger A logger that will be used to log messages that occur during parsing.\r\n   */\n\n\n  parseMessages(input, logger) {\n    // The interface does allow \"ArrayBuffer\" to be passed in, but this implementation does not. So let's throw a useful error.\n    if (typeof input !== \"string\") {\n      throw new Error(\"Invalid input for JSON hub protocol. Expected a string.\");\n    }\n\n    if (!input) {\n      return [];\n    }\n\n    if (logger === null) {\n      logger = NullLogger.instance;\n    } // Parse the messages\n\n\n    const messages = TextMessageFormat.parse(input);\n    const hubMessages = [];\n\n    for (const message of messages) {\n      const parsedMessage = JSON.parse(message);\n\n      if (typeof parsedMessage.type !== \"number\") {\n        throw new Error(\"Invalid payload.\");\n      }\n\n      switch (parsedMessage.type) {\n        case MessageType.Invocation:\n          this._isInvocationMessage(parsedMessage);\n\n          break;\n\n        case MessageType.StreamItem:\n          this._isStreamItemMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Completion:\n          this._isCompletionMessage(parsedMessage);\n\n          break;\n\n        case MessageType.Ping:\n          // Single value, no need to validate\n          break;\n\n        case MessageType.Close:\n          // All optional values, no need to validate\n          break;\n\n        default:\n          // Future protocol changes can add message types, old clients can ignore them\n          logger.log(LogLevel.Information, \"Unknown message type '\" + parsedMessage.type + \"' ignored.\");\n          continue;\n      }\n\n      hubMessages.push(parsedMessage);\n    }\n\n    return hubMessages;\n  }\n  /** Writes the specified {@link @microsoft/signalr.HubMessage} to a string and returns it.\r\n   *\r\n   * @param {HubMessage} message The message to write.\r\n   * @returns {string} A string containing the serialized representation of the message.\r\n   */\n\n\n  writeMessage(message) {\n    return TextMessageFormat.write(JSON.stringify(message));\n  }\n\n  _isInvocationMessage(message) {\n    this._assertNotEmptyString(message.target, \"Invalid payload for Invocation message.\");\n\n    if (message.invocationId !== undefined) {\n      this._assertNotEmptyString(message.invocationId, \"Invalid payload for Invocation message.\");\n    }\n  }\n\n  _isStreamItemMessage(message) {\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for StreamItem message.\");\n\n    if (message.item === undefined) {\n      throw new Error(\"Invalid payload for StreamItem message.\");\n    }\n  }\n\n  _isCompletionMessage(message) {\n    if (message.result && message.error) {\n      throw new Error(\"Invalid payload for Completion message.\");\n    }\n\n    if (!message.result && message.error) {\n      this._assertNotEmptyString(message.error, \"Invalid payload for Completion message.\");\n    }\n\n    this._assertNotEmptyString(message.invocationId, \"Invalid payload for Completion message.\");\n  }\n\n  _assertNotEmptyString(value, errorMessage) {\n    if (typeof value !== \"string\" || value === \"\") {\n      throw new Error(errorMessage);\n    }\n  }\n\n} //# sourceMappingURL=JsonHubProtocol.js.map","map":null,"metadata":{},"sourceType":"module"}