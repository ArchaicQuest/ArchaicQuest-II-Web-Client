{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/_shared/http.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nexport let AccountService = /*#__PURE__*/(() => {\n  class AccountService {\n    constructor(_http, _formBuilder, _toast, _router) {\n      this._http = _http;\n      this._formBuilder = _formBuilder;\n      this._toast = _toast;\n      this._router = _router;\n      this.signUpForm = this._formBuilder.group({\n        // username: ['', [Validators.required, Validators.minLength(3)]],\n        email: ['', [Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')]],\n        password: ['', [Validators.required, Validators.minLength(6)]]\n      });\n      this.loginForm = this._formBuilder.group({\n        email: ['', [Validators.required, Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')]],\n        password: ['', [Validators.required, Validators.minLength(6)]]\n      });\n    }\n\n    toggleSignUpButton(button) {\n      button.disabled = !button.disabled;\n    }\n\n    signUp(data, button) {\n      this._http.post(`${environment.hostAPI}/api/Account`, data).subscribe(response => {\n        const serverResponse = JSON.parse(response);\n\n        this._toast.success(serverResponse.toast);\n        /*\r\n           TODO:\r\n           Hash username instead and save that in the DB on login.\r\n           Return hash to frontend, hash is valid for the session.\r\n           Invalidate hash after x time, using hash is far safer.\r\n           In the mean time don't smite me :D\r\n        */\n\n\n        sessionStorage.setItem('id', serverResponse.id);\n\n        this._router.navigate(['/account/create-character']);\n      }, err => {\n        console.log(err.error);\n\n        this._toast.error(\"hello \" + err.error);\n\n        this.toggleSignUpButton(button);\n      });\n    }\n\n    login(data, button) {\n      return this._http.post(`${environment.hostAPI}/api/Account/Login`, data).subscribe(response => {\n        const serverResponse = JSON.parse(response);\n        console.log(serverResponse);\n\n        this._toast.success(serverResponse.toast);\n        /*\r\n           TODO:\r\n           Hash username instead and save that in the DB on login.\r\n           Return hash to frontend, hash is valid for the session.\r\n           Invalidate hash after x time, using hash is far safer.\r\n           In the mean time don't smite me :D\r\n        */\n\n\n        sessionStorage.setItem('id', serverResponse.id);\n\n        this._router.navigate(['/account/manage-characters']);\n      }, err => {\n        this._toast.error(err);\n\n        this.toggleSignUpButton(button);\n      });\n    }\n\n  }\n\n  AccountService.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpService), i0.ɵɵinject(i2.FormBuilder), i0.ɵɵinject(i3.ToastrService), i0.ɵɵinject(i4.Router));\n  };\n\n  AccountService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n  return AccountService;\n})();","map":null,"metadata":{},"sourceType":"module"}