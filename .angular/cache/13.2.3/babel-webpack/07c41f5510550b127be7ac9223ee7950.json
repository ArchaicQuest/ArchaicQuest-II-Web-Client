{"ast":null,"code":"\"use strict\";\n/**\n * Sigma.js WebGL Matrices Helpers\n * ================================\n *\n * Matrices-related helper functions used by sigma's WebGL renderer.\n * @module\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.multiplyVec = exports.multiply = exports.translate = exports.rotate = exports.scale = exports.identity = void 0;\n\nfunction identity() {\n  return Float32Array.of(1, 0, 0, 0, 1, 0, 0, 0, 1);\n}\n\nexports.identity = identity; // TODO: optimize\n\nfunction scale(m, x, y) {\n  m[0] = x;\n  m[4] = typeof y === \"number\" ? y : x;\n  return m;\n}\n\nexports.scale = scale;\n\nfunction rotate(m, r) {\n  var s = Math.sin(r),\n      c = Math.cos(r);\n  m[0] = c;\n  m[1] = s;\n  m[3] = -s;\n  m[4] = c;\n  return m;\n}\n\nexports.rotate = rotate;\n\nfunction translate(m, x, y) {\n  m[6] = x;\n  m[7] = y;\n  return m;\n}\n\nexports.translate = translate;\n\nfunction multiply(a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b00 = b[0],\n      b01 = b[1],\n      b02 = b[2];\n  var b10 = b[3],\n      b11 = b[4],\n      b12 = b[5];\n  var b20 = b[6],\n      b21 = b[7],\n      b22 = b[8];\n  a[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  a[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  a[2] = b00 * a02 + b01 * a12 + b02 * a22;\n  a[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  a[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  a[5] = b10 * a02 + b11 * a12 + b12 * a22;\n  a[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  a[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  a[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return a;\n}\n\nexports.multiply = multiply;\n\nfunction multiplyVec(a, b) {\n  var a00 = a[0],\n      a01 = a[1],\n      a02 = a[2];\n  var a10 = a[3],\n      a11 = a[4],\n      a12 = a[5];\n  var a20 = a[6],\n      a21 = a[7],\n      a22 = a[8];\n  var b0 = b[0],\n      b1 = b[1],\n      b2 = b[2];\n  var c = Array.isArray(b) ? [0, 0, 0] : Float32Array.of(0, 0, 0);\n  c[0] = b0 * a00 + b1 * a10 + b2 * a20;\n  c[1] = b0 * a01 + b1 * a11 + b2 * a21;\n  c[2] = b0 * a02 + b1 * a12 + b2 * a22;\n  return c;\n}\n\nexports.multiplyVec = multiplyVec;","map":null,"metadata":{},"sourceType":"script"}