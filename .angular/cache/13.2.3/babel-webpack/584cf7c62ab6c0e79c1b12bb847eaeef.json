{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Validators } from '@angular/forms';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"../manage/manage.service\";\nimport * as i4 from \"./Appearance/appearance.service\";\nexport let CreateService = /*#__PURE__*/(() => {\n  class CreateService {\n    constructor(_http, _formBuilder, _service, _appearanceService) {\n      this._http = _http;\n      this._formBuilder = _formBuilder;\n      this._service = _service;\n      this._appearanceService = _appearanceService;\n      this.createPlayerForm = this._formBuilder.group({\n        id: [''],\n        name: ['', Validators.required]\n      });\n      this.headers = new HttpHeaders({\n        'Content-Type': 'application/json'\n      });\n    }\n\n    getRace() {\n      return this._http.get(`${environment.hostAPI}/api/Character/Race`);\n    }\n\n    getClass() {\n      return this._http.get(`${environment.hostAPI}/api/Character/Class`);\n    }\n\n    createCharacter(data) {\n      this._http.post(`${environment.hostAPI}/api/Character/Player`, JSON.stringify(data), {\n        headers: this.headers // responseType: 'text'\n\n      }).subscribe(response => {\n        this._service.PlayCharacter(response);\n      }, err => console.log(err));\n    }\n\n    raceFormGroup() {\n      return this._formBuilder.group({\n        race: ['', Validators.required]\n      });\n    }\n\n    classFormGroup() {\n      return this._formBuilder.group({\n        class: ['', Validators.required]\n      });\n    }\n\n    validateName(c) {\n      return this.nameAvailable(c.value);\n    }\n\n    nameAvailable(name) {\n      clearTimeout(this.validationTimeout);\n      return new Promise(resolve => {\n        this.validationTimeout = setTimeout(() => {\n          let req = this._appearanceService.checkName(name);\n\n          req.subscribe(result => {\n            if (result) {\n              return resolve(null);\n            } else {\n              return resolve({\n                name: result\n              });\n            }\n          }, error => {});\n        }, 600);\n      });\n    }\n\n    appearanceFormGroup() {\n      return this._formBuilder.group({\n        char: this._formBuilder.group({\n          name: ['', Validators.required, this.validateName.bind(this)],\n          gender: ['Male', Validators.required]\n        }),\n        bodyType: this._formBuilder.group({\n          body: ['', Validators.required],\n          skinColor: ['', Validators.required]\n        }),\n        facialFeatures: this._formBuilder.group({\n          face: ['', Validators.required],\n          eyeColor: ['', Validators.required]\n        }),\n        hair: this._formBuilder.group({\n          hairColor: ['', Validators.required],\n          hairTexture: ['', Validators.required],\n          hairLength: ['', Validators.required],\n          facialHair: ['']\n        })\n      });\n    }\n\n  }\n\n  CreateService.ɵfac = function CreateService_Factory(t) {\n    return new (t || CreateService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.FormBuilder), i0.ɵɵinject(i3.ManageCharactersService), i0.ɵɵinject(i4.AppearanceService));\n  };\n\n  CreateService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: CreateService,\n    factory: CreateService.ɵfac,\n    providedIn: 'root'\n  });\n  return CreateService;\n})();","map":null,"metadata":{},"sourceType":"module"}