{"ast":null,"code":"\"use strict\";\n/**\n * Sigma.js Shader Utils\n * ======================\n *\n * Code used to load sigma's shaders.\n * @module\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadProgram = exports.loadFragmentShader = exports.loadVertexShader = void 0;\n/**\n * Function used to load a shader.\n */\n\nfunction loadShader(type, gl, source) {\n  var glType = type === \"VERTEX\" ? gl.VERTEX_SHADER : gl.FRAGMENT_SHADER; // Creating the shader\n\n  var shader = gl.createShader(glType);\n\n  if (shader === null) {\n    throw new Error(\"loadShader: error while creating the shader\");\n  } // Loading source\n\n\n  gl.shaderSource(shader, source); // Compiling the shader\n\n  gl.compileShader(shader); // Retrieving compilation status\n\n  var successfullyCompiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS); // Throwing if something went awry\n\n  if (!successfullyCompiled) {\n    var infoLog = gl.getShaderInfoLog(shader);\n    gl.deleteShader(shader);\n    throw new Error(\"loadShader: error while compiling the shader:\\n\".concat(infoLog, \"\\n\").concat(source));\n  }\n\n  return shader;\n}\n\nfunction loadVertexShader(gl, source) {\n  return loadShader(\"VERTEX\", gl, source);\n}\n\nexports.loadVertexShader = loadVertexShader;\n\nfunction loadFragmentShader(gl, source) {\n  return loadShader(\"FRAGMENT\", gl, source);\n}\n\nexports.loadFragmentShader = loadFragmentShader;\n/**\n * Function used to load a program.\n */\n\nfunction loadProgram(gl, shaders) {\n  var program = gl.createProgram();\n\n  if (program === null) {\n    throw new Error(\"loadProgram: error while creating the program.\");\n  }\n\n  var i, l; // Attaching the shaders\n\n  for (i = 0, l = shaders.length; i < l; i++) gl.attachShader(program, shaders[i]);\n\n  gl.linkProgram(program); // Checking status\n\n  var successfullyLinked = gl.getProgramParameter(program, gl.LINK_STATUS);\n\n  if (!successfullyLinked) {\n    gl.deleteProgram(program);\n    throw new Error(\"loadProgram: error while linking the program.\");\n  }\n\n  return program;\n}\n\nexports.loadProgram = loadProgram;","map":null,"metadata":{},"sourceType":"script"}